services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.2
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.5.2
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  app:
    build: ./backend/monolith-proxy/
    ports:
      - "${APP_PORT:-8080}:8080"
      - "${APP_DEBUG_PORT:-9010}:9010"
    depends_on:
      db:
        condition: service_healthy
      prometheus:
        condition: service_started
      grafana:
        condition: service_started
    env_file:
      - .env.template
    environment:
      SPRING_APPLICATION_NAME: ${SPRING_APPLICATION_NAME:-demo}
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:${DB_PORT:-5432}/${DB_NAME:-csd}
      SPRING_DATASOURCE_USERNAME: ${DB_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD:-postgres}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-dev}
      HIKARI_MAX_POOL_SIZE: ${HIKARI_MAX_POOL_SIZE:-20}
      SLEUTH_SAMPLER_PROBABILITY: ${SLEUTH_SAMPLER_PROBABILITY:-1.0}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-3600000}
      JWT_CLOCK_SKEW: ${JWT_CLOCK_SKEW:-30000}
#      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
#      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
#      FACEBOOK_CLIENT_ID: ${FACEBOOK_CLIENT_ID}
#      FACEBOOK_CLIENT_SECRET: ${FACEBOOK_CLIENT_SECRET}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-*}
      CORS_ALLOWED_METHODS: ${CORS_ALLOWED_METHODS:-*}
      CORS_ALLOWED_HEADERS: ${CORS_ALLOWED_HEADERS:-*}
#      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL}
#      SLACK_CHANNEL_NAME: ${SLACK_CHANNEL_NAME}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  logging:
    build: ./backend/logging/
#    env_file:
#      - ./backend/logging/.env
    ports:
      - "${LOGGING_PORT:-5001}:5001"
    depends_on:
      app:
        condition: service_healthy

  recommendations:
    build: ./backend/recommendations-service/
    ports:
      - "${REC_PORT:-8000}:8000"
    depends_on:
      app:
        condition: service_healthy
        
  opensearch:
    image: opensearchproject/opensearch:${OPENSEARCH_VERSION:-2.9.0}
    container_name: opensearch
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch-node1
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - OPENSEARCH_SECURITY_ENABLED=false
      - plugins.security.disabled=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - opensearch_data:/usr/share/opensearch/data
    ports:
      - "${OPENSEARCH_PORT:-9200}:9200"

  db:
    image: postgres:${POSTGRES_VERSION:-15}
    environment:
      POSTGRES_DB: ${DB_NAME:-csd}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    ports:
      - "${DB_PORT:-5432}:${DB_PORT:-5432}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-csd}"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION:-latest}
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "${PROMETHEUS_PORT:-9090}:${PROMETHEUS_PORT:-9090}"

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION:-latest}
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD:-admin}
    depends_on:
      prometheus:
        condition: service_started

volumes:
  postgres_data:
  opensearch_data:

